{
	"info": {
		"_postman_id": "4e86acd9-609e-4c43-a17c-b349cf7eebde",
		"name": "HW_2_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20771737"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"// 7. Спарсить request.\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json()\r",
							"let resp_name = response.name\r",
							"let resp_age = response.age\r",
							"let resp_salary = response.salary\r",
							"\r",
							"pm.test(\"Check name\", function(){\r",
							"    pm.expect(resp_name).to.eql(\"Danila\")\r",
							"})\r",
							"pm.test(\"Check age\", () => {\r",
							"    pm.expect(resp_age).to.eql(\"19\")\r",
							"})\r",
							"pm.test(\"Check salary\", () => {\r",
							"    pm.expect(resp_salary).to.eql(600)\r",
							"\r",
							"})\r",
							"\r",
							"let req = request.data\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = req.salary\r",
							"\r",
							"\r",
							"pm.test(\"Check name\", function(){\r",
							"    pm.expect(resp_name).to.eql(req_name)\r",
							"})\r",
							"pm.test(\"Check age\", () => {\r",
							"    pm.expect(resp_age).to.eql(req_age)\r",
							"})\r",
							"pm.test(\"Check salary\", () => {\r",
							"    pm.expect(resp_salary).to.eql(+req_salary)\r",
							"\r",
							"})\r",
							" \r",
							" console.log(response.family)\r",
							"\r",
							"let u_salary_1_5_year = response.family.u_salary_1_5_year\r",
							"pm.test(\"u_salary_1_5_year = salary * 4\", function(){\r",
							" pm.expect(u_salary_1_5_year).to.eql(req_salary * 4)\r",
							" })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Danila",
							"type": "text"
						},
						{
							"key": "age",
							"value": "19",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json()\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"pm.test(\"Check name\",function(){\r",
							"    pm.expect(response.name).to.eql(req.name)\r",
							"})\r",
							"pm.test(\"Check age\", () => {\r",
							"    pm.expect(response.age).to.eql(req.age)\r",
							"})\r",
							"pm.test(\"Check salary\", () => {\r",
							"    pm.expect(response.salary).to.eql(+req.salary)\r",
							"\r",
							"})\r",
							"\r",
							"console.log(response.family)\r",
							"\r",
							"pm.test(\"Check dog keys\", function(){\r",
							"    pm.expect(JSON.stringify(response.family.pets.dog)).to.include(\"name\" && \"age\")\r",
							"})\r",
							"\r",
							"pm.test(\"Check dog name\",function(){\r",
							"    pm.expect(response.family.pets.dog.name).to.eql('Luky')\r",
							"})\r",
							"pm.test(\"Check dog age\", () => {\r",
							"        pm.expect(response.family.pets.dog.age).to.eql(4)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Danila&age=19&salary=600",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Danila"
						},
						{
							"key": "age",
							"value": "19"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json()\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"pm.test(\"Check name\", () => {\r",
							"pm.expect(req.name).to.eql(response.name)\r",
							"})\r",
							"pm.test(\"Check age\", () => {\r",
							"    pm.expect(+req.age).to.eql(response.age)\r",
							"})\r",
							"\r",
							"console.log(response.salary)\r",
							"console.log(response.salary)\r",
							"console.log(response.salary[0])\r",
							"console.log(response.salary[1])\r",
							"console.log(response.salary[2])\r",
							"\r",
							"pm.test(\"Check salary\", () => {\r",
							"    pm.expect(+req.salary).to.eql(response.salary[0])\r",
							"})\r",
							"pm.test(\"Check salary * 2\", () => {\r",
							"    pm.expect(String(req.salary * 2)).to.eql(response.salary[1])\r",
							"})\r",
							"pm.test(\"Check salary * 3\", () => {\r",
							"    pm.expect(String(req.salary * 3)).to.eql(response.salary[2])\r",
							"})\r",
							"\r",
							"pm.environment.set(\"name\", req.name);\r",
							"pm.environment.set(\"age\", req.age);\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							";\r",
							"\r",
							"response.salary.forEach(el => console.log(el))\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Danila&age=19&salary=600",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Danila"
						},
						{
							"key": "age",
							"value": "19"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"// 6. Спарсить response body в json.\r",
							"// 7. Спарсить request.\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"pm.environment.get(\"name\")\r",
							"pm.environment.get(\"age\")\r",
							"pm.environment.get(\"salary\")\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json()\r",
							"let req = request.data\r",
							"let stringResponse = JSON.stringify(response)\r",
							"pm.test(\"Check salary key start_qa_salary\", () => {\r",
							"    pm.expect(response).to.ownProperty('start_qa_salary')\r",
							"}) \r",
							"pm.test(\"Check salary key qa_salary_after_6_months\", () => {\r",
							"       pm.expect(response).to.ownProperty('qa_salary_after_6_months')  \r",
							"\r",
							"})\r",
							"pm.test(\"Check salary key qa_salary_after_12_months\", () => {\r",
							"       pm.expect(response).to.ownProperty('qa_salary_after_12_months')  \r",
							"\r",
							"})\r",
							"pm.test(\"Check salary key qa_salary_after_1.5_year\", () => {\r",
							"       pm.expect(response).to.ownProperty('qa_salary_after_1.5_year')  \r",
							"\r",
							"})\r",
							"pm.test(\"Check salary key qa_salary_after_3.5_years\", () => {\r",
							"       pm.expect(response).to.ownProperty('qa_salary_after_3.5_years')  \r",
							"\r",
							"})\r",
							"pm.test(\"Check person key\", () => {\r",
							"       pm.expect(response).to.ownProperty('person')  \r",
							"})\r",
							"   \r",
							"\r",
							"\r",
							"pm.test(\"Check start_qa_salary value\", () => {\r",
							"    pm.expect(response.start_qa_salary).to.eql(+req.salary)\r",
							"\r",
							"})\r",
							"pm.test(\"Check qa_salary_after_6_months value\", () => {\r",
							"     pm.expect(response.qa_salary_after_6_months).to.eql(+req.salary * 2)\r",
							"\r",
							"})\r",
							"pm.test(\"Check qa_salary_after_12_months value\", () => {\r",
							"     pm.expect(response.qa_salary_after_12_months).to.eql(+req.salary * 2.7)\r",
							"\r",
							"})\r",
							"pm.test(\"Check qa_salary_after_1.5_year value\", () => {\r",
							"     pm.expect(response['qa_salary_after_1.5_year']).to.eql(+req.salary * 3.3)\r",
							"\r",
							"})\r",
							"pm.test(\"Check qa_salary_after_3.5_years value\", () => {\r",
							"     pm.expect(response['qa_salary_after_3.5_years']).to.eql(+req.salary * 3.8)\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Check salary value in u_age\", () => {\r",
							"    pm.expect(response.person.u_name[1]).to.eql(+req.salary)\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check u_salary_5_years value\", () => {\r",
							"    pm.expect(response.person.u_salary_5_years).to.eql(+req.salary * 4.2)\r",
							"})\r",
							"\r",
							"\r",
							"for(let i = 0; i <response.person.length; i++)\r",
							"break;\r",
							"console.log(response.person)\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}